# -*- coding: utf-8 -*-
"""Perceptron.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1suR4Mx85jGvVCct-H4JFtqEtcGWR1x4Q
"""

# Commented out IPython magic to ensure Python compatibility.
from __future__ import absolute_import, division, print_function, unicode_literals

# Install TensorFlow
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf
from tensorflow.keras import layers
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import datetime
from google.colab import drive
drive.mount('/content/gdrive')

# %load_ext tensorboard

print("Tensorflow version: "+tf.__version__)

batch_size = 50
epochs = 200
model_num = 'all'
model_type = 'pow'
root_path = 'gdrive/My Drive/ipn/AeroTTeam/data/Archives/'
initial_epoch = 0

model = tf.keras.Sequential()
model.add(layers.Input(batch_shape=(batch_size,24)))
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(256, activation='relu'))
model.add(layers.Dense(100, activation='relu'))
model.add(layers.Dense(60, activation='relu'))
model.add(layers.Dense(1, activation='linear'))
model.compile(loss='mse', optimizer='adam', lr=0.001)
model.summary()

def load_data (rooth_path, model_type, model_num, data_type):
  input_train = pd.read_csv(root_path + 'input_'+ model_num +'_'+data_type+'_mlp_r10.csv', header=None )
  output_train = pd.read_csv(root_path + 'output_'+ model_num +'_'+data_type+'_'+ model_type + '_mlp_r10.csv', header=None )

  samples = input_train.shape[0] - (input_train.shape[0] % batch_size)

  if model_type == 'rpm':
      param_num = 14
  elif model_type == 'pow':
      param_num = 24
  elif model_type == 'torq':
      param_num = 34

  input = input_train.iloc[0:samples, np.r_[0:14,param_num:param_num+10]].values

  output = output_train[0:samples].values

  return input, output

input, output = load_data(root_path,model_type,model_num, "train")

#Load Tensorboard
time = datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
logdir = os.path.join(root_path+"logs", time + "_"+ model_num +"_"+model_type+"_b{}_mlp".format(batch_size) )
modeldir = os.path.join(root_path+"models/", time + "_"+ model_num +"_"+model_type+"_b{}_mlp.h".format(batch_size) )
tensorboard_callback = tf.keras.callbacks.TensorBoard(logdir, update_freq="epoch", write_images=True)

from sklearn.metrics import mean_squared_error 
  
class areOurEyesReal(tf.keras.callbacks.Callback):
  def __init__(self, xy):
    self.xy = xy
  def on_epoch_end(self, epoch, logs=None):
    pred = self.model.predict(self.xy[0])
    real = self.xy[1]
    mser = mean_squared_error(real,pred)
    print('The mean squared error for epoch {} is {:7.2f}.'.format(epoch+1, mser))
areOurEyesReal_f = areOurEyesReal([input, output])

model.fit(x = input,
            y= output,
            batch_size=batch_size,
            epochs=initial_epoch+epochs,
            validation_split = 0.1,
            callbacks=[tensorboard_callback],
            initial_epoch=initial_epoch,
            verbose=2)
 initial_epoch = initial_epoch + epochs

model.save(modeldir)

modeldir= "models/20191115-004125_all_pow_b50_mlp.h"

input_t, output_t = load_data(root_path,model_type,model_num, "test")

predicted_values = model.predict(x = input)
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111)
total = range(0,predicted_values.shape[0])
ax.scatter(predicted_values,output, s=25, marker='o', edgecolors='k', facecolors='w', label ="real vs predicted")
plt.legend(loc='upper left')
ax.set_ylabel("real")
ax.set_xlabel("predicted")
plt.savefig(modeldir+"/scatter.png")
ax.figure.show()

plt.figure(figsize=(16,8))
plt.xlabel('tiempo (s)')
plt.ylabel('parámetro')
plt.plot(output[2200:2500],marker='o',label='real')
plt.plot(predicted_values[2200:2500],marker='x',label='modelo')
plt.legend()
plt.savefig(modeldir+"/comparison.png")

predicted_values_r = model.predict(x = input_t)
fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111)
total = range(0,predicted_values_r.shape[0])
ax.scatter(predicted_values_r,output_t, s=25, marker='o', edgecolors='k', facecolors='w', label ="real vs modelo")
plt.legend(loc='upper left')
ax.set_ylabel("real")
ax.set_xlabel("modelo")
plt.savefig(modeldir+"/scatter_r.png")
ax.figure.show()

plt.figure(figsize=(16,8))
plt.plot(output_t[2100:2400],marker='o', label='real')
plt.plot(predicted_values_r[2100:2400],marker='x', label='modelo')
plt.xlabel('tiempo')
plt.ylabel('parámetro')
plt.legend()
plt.savefig(modeldir+"/comparison_r.png")

from sklearn import metrics
print("Error cuadratico medio test:\t {:7.4f}".format(metrics.mean_squared_error(output_t,predicted_values_r)))
print("R2 Score test:\t\t\t {:7.3f}".format(metrics.r2_score(output_t,predicted_values_r)))
print("Explained variance test:\t {:7.3f}".format(metrics.explained_variance_score(output_t,predicted_values_r)))

print("Error cuadratico medio train:\t {:7.4f}".format(metrics.mean_squared_error(output,predicted_values)))
print("R2 Score train:\t\t\t {:7.3f}".format(metrics.r2_score(output,predicted_values)))
print("Explained variance train:\t {:7.3f}".format(metrics.explained_variance_score(output,predicted_values)))