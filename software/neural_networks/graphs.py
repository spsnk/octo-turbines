# -*- coding: utf-8 -*-
"""Gaficar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q0eUJSla9fjfrwngv_wOBd69VDPAm2NY
"""

# Commented out IPython magic to ensure Python compatibility.
from __future__ import absolute_import, division, print_function, unicode_literals

# Install TensorFlow
try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass

import tensorflow as tf
from tensorflow.keras import layers
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import datetime
from google.colab import drive
drive.mount('/content/gdrive')

# %load_ext tensorboard
print("Tensorflow version: "+tf.__version__)

initial_epoch = 0

batch_size = 100
epochs = 50
model_num = 'all'
model_type = 'pow'
root_path = 'gdrive/My Drive/ipn/AeroTTeam/data/Archives/'
model_dir = "/models/"+"20191114-215530_all_pow_b50.h"

def load_data_rnn ( root_path, model_type, model_num, data_type ):
  input_train = pd.read_csv(root_path + 'input_'+ model_num +'_'+data_type+'_rnn_r10.csv', header=None, dtype="Float32"  )
  output_train = pd.read_csv(root_path + 'output_'+ model_num +'_'+data_type+'_'+ model_type + '_rnn_r10.csv', header=None, dtype="Float32"  )

  samples = input_train.shape[0] - (input_train.shape[0] % batch_size)

  if model_type == 'rpm':
      param_num = 14
  elif model_type == 'pow':
      param_num = 15
  elif model_type == 'torq':
      param_num = 16
  
  input1 = input_train.iloc[0:samples,0:4].values #input 1: parametros de la h√©lice
  input2 = input_train.iloc[0:samples,4:14].values.reshape(samples,10,1) #input 2: serie de tiempo de viento
  input3 = input_train.iloc[0:samples,param_num].values #input 3: primer valor de medicion a predecir

  output = output_train[0:samples].values

  return [[input1,input2,input3],output]

def load_data (rooth_path, model_type, model_num, data_type):
  input_train = pd.read_csv(root_path + 'input_'+ model_num +'_'+data_type+'_mlp_r10.csv', header=None )
  output_train = pd.read_csv(root_path + 'output_'+ model_num +'_'+data_type+'_'+ model_type + '_mlp_r10.csv', header=None )

  samples = input_train.shape[0] - (input_train.shape[0] % batch_size)

  if model_type == 'rpm':
      param_num = 14
  elif model_type == 'pow':
      param_num = 24
  elif model_type == 'torq':
      param_num = 34

  input = input_train.iloc[0:samples, np.r_[0:14,param_num:param_num+10]].values

  output = output_train[0:samples].values

  return input, output

input, output = load_data_rnn (root_path, model_type, model_num, "train")
input_t, output_t = load_data_rnn (root_path, model_type, model_num, "test")

model = tf.keras.models.load_model(root_path+model_dir)

pred = model.predict(input)
pred_t = model.predict(input_t)

fig = plt.figure(figsize=(12, 8))
ax = fig.add_subplot(111)
ax.scatter(pred_t,output_t, s=25, marker='o', edgecolors='k', facecolors='w', label ="real vs modelo")
plt.legend(loc='upper left')
ax.set_ylabel("real")
ax.set_xlabel("modelo")
plt.savefig(root_path+model_dir+"/scatter_"+datetime.datetime.now().strftime("%Y%m%d-%H%M%S")+".png")
ax.figure.show()

plt.figure(figsize=(12,8))
plt.plot(output[20000:20300],marker='o')
plt.plot(pred[20000:20300],marker='x')
plt.ylabel("velocidad del viento/potencia")
plt.xlabel("tiempo (segundos)")
plt.savefig(root_path+model_dir+"/comparison_"+datetime.datetime.now().strftime("%Y%m%d-%H%M%S")+".png")

from sklearn import metrics
print("Error cuadratico medio test:\t {:7.4f}".format(metrics.mean_squared_error(output_t,pred_t)))
print("R2 Score test:\t\t\t {:7.3f}".format(metrics.r2_score(output_t,pred_t)))
print("Explained variance test:\t {:7.3f}".format(metrics.explained_variance_score(output_t,pred_t)))

print("Error cuadratico medio train:\t {:7.4f}".format(metrics.mean_squared_error(output,pred)))
print("R2 Score train:\t\t\t {:7.3f}".format(metrics.r2_score(output,pred)))
print("Explained variance train:\t {:7.3f}".format(metrics.explained_variance_score(output,pred)))