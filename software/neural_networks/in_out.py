# -*- coding: utf-8 -*-
"""in_out.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkfw9ThR7vbMqUy39F-A3RN3zpD_wHnO

# Preprocesamiento

## Funciones iniciales

### Dependencias
"""

import numpy as np
import pandas as pd
import csv
import math
from sklearn.model_selection import train_test_split

from google.colab import drive
drive.mount('/content/gdrive')
root_path = 'gdrive/My Drive/ipn/AeroTTeam/data/'

df2['wattage']

"""### Exportación de archivos"""

def save(archive, dataset, tipo, parameter, nn, recc):
  with open(root_path + "Archives/"+tipo+"_"+archive+"_"+parameter+"_"+nn+"_r"+recc+".csv", "w") as f:
    writer = csv.writer(f, delimiter=',')
    for i in dataset:
      writer.writerow(output_list(i))

"""### Limpieza de caracteres"""

def output_list(masterList):
  output = []
  for item in masterList:
    if isinstance(item,list):
      for i in output_list(item):
        output.append(i)
    else:
      output.append(item)
  return output

"""### Separación de conjuntos"""

def split(data, recurrence):
  dataset = []
  for i in range((int(len(df2.index))-10)):
    tmp = [data[0][i+recurrence]]
    dataset.append(tmp)

  train, test = train_test_split(dataset, train_size=0.90, shuffle=False)
  
  return train, test

"""## Función de preprocesamiento"""

def processing_mlp(archive, df2):
  df2['id_Rotor'] = df2['id_Rotor'].str.upper()
  df2['torque'] = 'default value'
  
  df2['intensity'] += abs(df2['intensity'].min())
  df2['voltage'] += abs(df2['voltage'].min())
  df2['wattage'] /= 1000
  df2['torque'] = df2['wattage']/((df2['rpm']/120)*math.pi)
  df2.replace(to_replace=math.inf, value=0, inplace=True)
  df2['torque'].fillna(0, inplace=True)
      
  matched_rotor = df1['id_Rotor']==df2['id_Rotor'][0]
  matched_index = matched_rotor.index[matched_rotor]
  ps = df1.loc[matched_index]
  ps.drop('id_Rotor', 1)

  parameters = []
  recurrence = 10

  for rows in ps.itertuples():
    my_list = [rows.Angulo_corte, rows.Radio_mayor, rows.Radio_menor, rows.Superposicion] 
    parameters.append(my_list)

  for index, row in df2.iterrows():
    values = [df2.loc[:index,'wind_speed'], df2.loc[:index,'rpm'], df2.loc[:index,'wattage'], df2.loc[:index,'torque']]
          
  tmp = []
  tmp1 = []
  tmp2 = []
  tmp3 = []
  tmp4 = []
  pairs = []
  for i in range(len(df2.index)):
    tmp.append([values[0][i]])
    tmp1.append([values[1][i]])
    tmp2.append([values[2][i]])
    tmp3.append([values[3][i]])

  for i in range(int(len(df2.index))):
    conc = parameters, tmp[i:i+recurrence], tmp1[i:i+recurrence], tmp2[i:i+recurrence], tmp3[i:i+recurrence]
    pairs.append(conc)

  pairs = pairs[:-recurrence]
  train, test = train_test_split(pairs, train_size=0.90, shuffle=False)
  
  save(archive, train, 'input', 'train', 'mlp', str(recurrence))
  save(archive, test, 'input', 'test', 'mlp', str(recurrence))
          
  for index, row in df2.iterrows():
    rpm = [df2.loc[recurrence:index+recurrence,'rpm']]
    wattage = [df2.loc[recurrence:index+recurrence,'wattage']]
    torque = [df2.loc[recurrence:index+recurrence,'torque']]
  
  train, test = split(rpm, recurrence)
  save(archive, train, 'output', 'train_rpm', 'mlp', str(recurrence))
  save(archive, test, 'output', 'test_rpm', 'mlp', str(recurrence))
  
  train, test = split(wattage, recurrence)
  save(archive, train, 'output', 'train_pow', 'mlp', str(recurrence))
  save(archive, test, 'output', 'test_pow', 'mlp', str(recurrence))
  
  train, test = split(torque, recurrence)
  save(archive, train, 'output', 'train_torq', 'mlp', str(recurrence))
  save(archive, test, 'output', 'test_torq', 'mlp', str(recurrence))

def processing_rnn(archive, df2):
  df2['id_Rotor'] = df2['id_Rotor'].str.upper()
  df2['torque'] = 'default value'
  
  df2['intensity'] += abs(df2['intensity'].min())
  df2['voltage'] += abs(df2['voltage'].min())
  df2['wattage'] /= 1000
  df2['torque'] = df2['wattage']/((df2['rpm']/120)*math.pi)
  df2.replace(to_replace=math.inf, value=0, inplace=True)
  df2['torque'].fillna(0, inplace=True)
      
  matched_rotor = df1['id_Rotor']==df2['id_Rotor'][0]
  matched_index = matched_rotor.index[matched_rotor]
  ps = df1.loc[matched_index]
  ps.drop('id_Rotor', 1)

  parameters = []
  recurrence = 10

  for rows in ps.itertuples():
    my_list = [rows.Angulo_corte, rows.Radio_mayor, rows.Radio_menor, rows.Superposicion] 
    parameters.append(my_list)

  for index, row in df2.iterrows():
    values = [df2.loc[:index+1,'wind_speed'], df2.loc[:index,'rpm'], df2.loc[:index,'wattage'], df2.loc[:index,'torque']]
          
  tmp = []
  tmp1 = []
  tmp2 = []
  tmp3 = []
  tmp4 = []
  pairs = []
  for i in range(len(df2.index)):
    tmp.append([values[0][i]])
    tmp1.append([values[1][i]])
    tmp2.append([values[2][i]])
    tmp3.append([values[3][i]])

  for i in range(int(len(df2.index))):
    conc = parameters, tmp[i:i+recurrence], tmp1[i], tmp2[i], tmp3[i]
    pairs.append(conc)

  pairs = pairs[:-recurrence]
  train, test = train_test_split(pairs, train_size=0.90, shuffle=False)
  
  save(archive, train, 'input', 'train', 'rnn', str(recurrence))
  save(archive, test, 'input', 'test', 'rnn', str(recurrence))
          
  for index, row in df2.iterrows():
    rpm = [df2.loc[recurrence:index+recurrence,'rpm']]
    wattage = [df2.loc[recurrence:index+recurrence,'wattage']]
    torque = [df2.loc[recurrence:index+recurrence,'torque']]
  
  train, test = split(rpm, recurrence)
  save(archive, train, 'output', 'train_rpm', 'rnn', str(recurrence))
  save(archive, test, 'output', 'test_rpm', 'rnn', str(recurrence))
  
  train, test = split(wattage, recurrence)
  save(archive, train, 'output', 'train_pow', 'rnn', str(recurrence))
  save(archive, test, 'output', 'test_pow', 'rnn', str(recurrence))
  
  train, test = split(torque, recurrence)
  save(archive, train, 'output', 'train_torq', 'rnn', str(recurrence))
  save(archive, test, 'output', 'test_torq', 'rnn', str(recurrence))

"""## Lectura de archivos"""

df1 = pd.read_csv(root_path + 'cfd_record.csv')

archive=['039', '040', '054', '055', '056', '057']
for i in archive:
  df2 = pd.read_csv(root_path + 'se' + i + '.csv', header=None, names=('date','id_Rotor','wind_direction','wind_speed','rpm','intensity','voltage','wattage'))
  processing_mlp(i, df2)
  processing_rnn(i, df2)

